[agent]
  interval = "1m"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "5s"
  flush_jitter = "0s"
  precision = ""
  debug = false
  quiet = false
  logfile = ""
  hostname = "$HOSTNAME"
  omit_hostname = false

[[outputs.influxdb]]
  urls = ["http://influxdb:8086"]
  database = "telegraf"
  username = ""
  password = ""
  retention_policy = ""
  write_consistency = "any"
  timeout = "5s"

[[outputs.prometheus_client]]
  ## Address to listen on.
  listen = ":9273"

  ## Metric version controls the mapping from Telegraf metrics into
  ## Prometheus format.  When using the prometheus input, use the same value in
  ## both plugins to ensure metrics are round-tripped without modification.
  ##
  ##   example: metric_version = 1;
  ##            metric_version = 2; recommended version
  metric_version = 2

  ## Use HTTP Basic Authentication.
  # basic_username = "Foo"
  # basic_password = "Bar"

  ## If set, the IP Ranges which are allowed to access metrics.
  ##   ex: ip_range = ["192.168.0.0/24", "192.168.1.0/30"]
  # ip_range = []

  ## Path to publish the metrics on.
  # path = "/metrics"

  ## Expiration interval for each metric. 0 == no expiration
  # expiration_interval = "60s"

  ## Collectors to enable, valid entries are "gocollector" and "process".
  ## If unset, both are enabled.
  # collectors_exclude = ["gocollector", "process"]

  ## Send string metrics as Prometheus labels.
  ## Unless set to false all string metrics will be sent as labels.
  # string_as_label = true

  ## If set, enable TLS with the given certificate.
  # tls_cert = "/etc/ssl/telegraf.crt"
  # tls_key = "/etc/ssl/telegraf.key"

  ## Set one or more allowed client CA certificate file names to
  ## enable mutually authenticated TLS connections
  # tls_allowed_cacerts = ["/etc/telegraf/clientca.pem"]

  ## Export metric collection time.
  # export_timestamp = false

[[inputs.http]]
  ## One or more URLs from which to read formatted metrics
  urls = [
    "http://indy-node-monitor:8080/networks/sbn"
  ]
  name_override = "node"

  ## HTTP method
  method = "GET"

  ## Optional HTTP headers
  headers = {"seed" = "${SBN_SEED}"}

  ## HTTP entity-body to send with POST/PUT requests.
  # body = ""

  ## HTTP Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  # content_encoding = "identity"

  ## Optional file with Bearer token
  ## file content is added as an Authorization header
  # bearer_token = "/path/to/file"

  ## Optional HTTP Basic Auth Credentials
  # username = "username"
  # password = "pa$$word"

  ## OAuth2 Client Credentials. The options 'client_id', 'client_secret', and 'token_url' are required to use OAuth2.
  # client_id = "clientid"
  # client_secret = "secret"
  # token_url = "https://indentityprovider/oauth2/v1/token"
  # scopes = ["urn:opc:idm:__myscopes__"]

  ## HTTP Proxy support
  # http_proxy_url = ""

  ## Optional TLS Config
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

  ## Amount of time allowed to complete the HTTP request
  timeout = "2m"

  ## List of success status codes
  success_status_codes = [200]

  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "json"

  ## When strict is true and a JSON array is being parsed, all objects within the
  ## array must be valid
  json_strict = true

  ## Query is a GJSON path that specifies a specific chunk of JSON to be
  ## parsed, if not specified the whole document will be parsed.
  ##
  ## GJSON query paths are described here:
  ##   https://github.com/tidwall/gjson/tree/v1.3.0#path-syntax
  json_query = ""

  ## Tag keys is an array of keys that should be added as tags.  Matching keys
  ## are no longer saved as fields. Supports wildcard glob matching.
  tag_keys = [
    "name",
    "network"
  ]

  ## Array of glob pattern strings or booleans keys that should be added as string fields.
  json_string_fields = [
    "client-address",
    "node-address",
    "status_software_sovrin",
    "status_software_indy-node",
    ##Internal Node Ports and IPs
    "response_result_data_Node_info_Node_ip",
    "response_result_data_Node_info_Node_port",
    "response_result_data_Node_info_Client_ip",
    "response_result_data_Node_info_Client_port",
    "response_result_data_Node_info_Node_protocol",

    "status_ok",
    "response_result_data_Node_info_Mode",
    "response_result_data_Node_info_BLS_key",
    "response_result_data_Hardware_HDD_used_by_node",
    "response_result_data_Pool_info_Read_only",
    "response_result_data_Pool_info_Suspicious_nodes",
    "response_result_data_Pool_info_Quorums",
    "response_result_data_Software_OS_version",

    ##Doesn't Display
    "response_result_data_Node_info_verkey",
    "response_result_data_Node_info_Catchup_status_Ledger_statuses",
    "response_result_data_Node_info_Catchup_status_Waiting_consistency_proof_msgs",
    "response_result_data_Node_info_Catchup_status_Last_txn_3PC_keys",
    "response_result_data_Node_info_Committed_ledger_root_hashes",
    "response_result_data_Node_info_Committed_state_root_hashes",
    "response_result_data_Node_info_Uncommitted_state_root_hashes",
    "response_result_data_Node_info_did",
    "response_result_data_Extractions_indy-node-status",
    "response_result_data_Extractions_node-control-status",
    "response_result_data_Extractions_upgrade_log",
    "response_result_data_Extractions_journalctl_exceptions",
    ##Not sure if Reachable Nodes is a string or not
    "response_result_data_Pool_info_Reachable_nodes",
    "response_result_data_Pool_info_Unreachable_nodes",
    "response_result_data_Software_Installed_packages",
    "response_result_data_Software_Indy_packages"
  ]

  ## Name key is the key to use as the measurement name.
  # json_name_key = "name"

  ## Time key is the key containing the time that should be used to create the
  ## metric.
  json_time_key = "status_timestamp"

  ## Time format is the time layout that should be used to interpret the json_time_key.
  ## The time must be `unix`, `unix_ms`, `unix_us`, `unix_ns`, or a time in the
  ## "reference time".  To define a different format, arrange the values from
  ## the "reference time" in the example to match the format you will be
  ## using.  For more information on the "reference time", visit
  ## https://golang.org/pkg/time/#Time.Format
  ##   ex: json_time_format = "Mon Jan 2 15:04:05 -0700 MST 2006"
  ##       json_time_format = "2006-01-02T15:04:05Z07:00"
  ##       json_time_format = "01/02/2006 15:04:05"
  ##       json_time_format = "unix"
  ##       json_time_format = "unix_ms"
  json_time_format = "unix"

  ## Timezone allows you to provide an override for timestamps that
  ## don't already include an offset
  ## e.g. 04/06/2016 12:41:45
  ##
  ## Default: "" which renders UTC
  ## Options are as follows:
  ##   1. Local               -- interpret based on machine localtime
  ##   2. "America/New_York"  -- Unix TZ values like those found in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  ##   3. UTC                 -- or blank/unspecified, will return timestamp in UTC
  json_timezone = ""


[[inputs.http]]
  ## One or more URLs from which to read formatted metrics
  urls = [
    "http://indy-node-monitor:8080/networks/ssn"
  ]
  name_override = "node"

  ## HTTP method
  method = "GET"

  ## Optional HTTP headers
  headers = {"seed" = "${SSN_SEED}"}

  ## HTTP entity-body to send with POST/PUT requests.
  # body = ""

  ## HTTP Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  # content_encoding = "identity"

  ## Optional file with Bearer token
  ## file content is added as an Authorization header
  # bearer_token = "/path/to/file"

  ## Optional HTTP Basic Auth Credentials
  # username = "username"
  # password = "pa$$word"

  ## OAuth2 Client Credentials. The options 'client_id', 'client_secret', and 'token_url' are required to use OAuth2.
  # client_id = "clientid"
  # client_secret = "secret"
  # token_url = "https://indentityprovider/oauth2/v1/token"
  # scopes = ["urn:opc:idm:__myscopes__"]

  ## HTTP Proxy support
  # http_proxy_url = ""

  ## Optional TLS Config
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

  ## Amount of time allowed to complete the HTTP request
  timeout = "2m"

  ## List of success status codes
  success_status_codes = [200]

  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "json"

  ## When strict is true and a JSON array is being parsed, all objects within the
  ## array must be valid
  json_strict = true

  ## Query is a GJSON path that specifies a specific chunk of JSON to be
  ## parsed, if not specified the whole document will be parsed.
  ##
  ## GJSON query paths are described here:
  ##   https://github.com/tidwall/gjson/tree/v1.3.0#path-syntax
  json_query = ""

  ## Tag keys is an array of keys that should be added as tags.  Matching keys
  ## are no longer saved as fields. Supports wildcard glob matching.
  tag_keys = [
    "name",
    "network"
  ]

  ## Array of glob pattern strings or booleans keys that should be added as string fields.
  json_string_fields = [
    "client-address",
    "node-address",
    "status_software_sovrin",
    "status_software_indy-node",
    ##Internal Node Ports and IPs
    "response_result_data_Node_info_Node_ip",
    "response_result_data_Node_info_Node_port",
    "response_result_data_Node_info_Client_ip",
    "response_result_data_Node_info_Client_port",
    "response_result_data_Node_info_Node_protocol",

    "status_ok",
    "response_result_data_Node_info_Mode",
    "response_result_data_Node_info_BLS_key",
    "response_result_data_Hardware_HDD_used_by_node",
    "response_result_data_Pool_info_Read_only",
    "response_result_data_Pool_info_Suspicious_nodes",
    "response_result_data_Pool_info_Quorums",
    "response_result_data_Software_OS_version",
    "response_result_data_Node_info_verkey",
    "response_result_data_Node_info_did",

    ##Doesn't Display
    "response_result_data_Node_info_Catchup_status_Ledger_statuses",
    "response_result_data_Node_info_Catchup_status_Waiting_consistency_proof_msgs",
    "response_result_data_Node_info_Catchup_status_Last_txn_3PC_keys",
    "response_result_data_Node_info_Committed_ledger_root_hashes",
    "response_result_data_Node_info_Committed_state_root_hashes",
    "response_result_data_Node_info_Uncommitted_state_root_hashes",
    "response_result_data_Extractions_indy-node-status",
    "response_result_data_Extractions_node-control-status",
    "response_result_data_Extractions_upgrade_log",
    "response_result_data_Extractions_journalctl_exceptions",
    ##Not sure if Reachable Nodes is a string or not
    "response_result_data_Pool_info_Reachable_nodes",
    "response_result_data_Pool_info_Unreachable_nodes",
    "response_result_data_Software_Installed_packages",
    "response_result_data_Software_Indy_packages"
  ]

  ## Name key is the key to use as the measurement name.
  # json_name_key = "name"

  ## Time key is the key containing the time that should be used to create the
  ## metric.
  json_time_key = "status_timestamp"

  ## Time format is the time layout that should be used to interpret the json_time_key.
  ## The time must be `unix`, `unix_ms`, `unix_us`, `unix_ns`, or a time in the
  ## "reference time".  To define a different format, arrange the values from
  ## the "reference time" in the example to match the format you will be
  ## using.  For more information on the "reference time", visit
  ## https://golang.org/pkg/time/#Time.Format
  ##   ex: json_time_format = "Mon Jan 2 15:04:05 -0700 MST 2006"
  ##       json_time_format = "2006-01-02T15:04:05Z07:00"
  ##       json_time_format = "01/02/2006 15:04:05"
  ##       json_time_format = "unix"
  ##       json_time_format = "unix_ms"
  json_time_format = "unix"

  ## Timezone allows you to provide an override for timestamps that
  ## don't already include an offset
  ## e.g. 04/06/2016 12:41:45
  ##
  ## Default: "" which renders UTC
  ## Options are as follows:
  ##   1. Local               -- interpret based on machine localtime
  ##   2. "America/New_York"  -- Unix TZ values like those found in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  ##   3. UTC                 -- or blank/unspecified, will return timestamp in UTC
  json_timezone = ""

[[inputs.http]]
  ## One or more URLs from which to read formatted metrics
  urls = [
    "http://indy-node-monitor:8080/networks/smn"
  ]
  name_override = "node"

  ## HTTP method
  method = "GET"

  ## Optional HTTP headers
  headers = {"seed" = "${SMN_SEED}"}

  ## HTTP entity-body to send with POST/PUT requests.
  # body = ""

  ## HTTP Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  # content_encoding = "identity"

  ## Optional file with Bearer token
  ## file content is added as an Authorization header
  # bearer_token = "/path/to/file"

  ## Optional HTTP Basic Auth Credentials
  # username = "username"
  # password = "pa$$word"

  ## OAuth2 Client Credentials. The options 'client_id', 'client_secret', and 'token_url' are required to use OAuth2.
  # client_id = "clientid"
  # client_secret = "secret"
  # token_url = "https://indentityprovider/oauth2/v1/token"
  # scopes = ["urn:opc:idm:__myscopes__"]

  ## HTTP Proxy support
  # http_proxy_url = ""

  ## Optional TLS Config
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

  ## Amount of time allowed to complete the HTTP request
  timeout = "2m"

  ## List of success status codes
  success_status_codes = [200]

  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "json"

  ## When strict is true and a JSON array is being parsed, all objects within the
  ## array must be valid
  json_strict = true

  ## Query is a GJSON path that specifies a specific chunk of JSON to be
  ## parsed, if not specified the whole document will be parsed.
  ##
  ## GJSON query paths are described here:
  ##   https://github.com/tidwall/gjson/tree/v1.3.0#path-syntax
  json_query = ""

  ## Tag keys is an array of keys that should be added as tags.  Matching keys
  ## are no longer saved as fields. Supports wildcard glob matching.
  tag_keys = [
    "name",
    "network"
  ]

  ## Array of glob pattern strings or booleans keys that should be added as string fields.
  json_string_fields = [
    "client-address",
    "node-address",
    "status_software_sovrin",
    "status_software_indy-node",
    ##Internal Node Ports and IPs
    "response_result_data_Node_info_Node_ip",
    "response_result_data_Node_info_Node_port",
    "response_result_data_Node_info_Client_ip",
    "response_result_data_Node_info_Client_port",
    "response_result_data_Node_info_Node_protocol",

    "status_ok",
    "response_result_data_Node_info_Mode",
    "response_result_data_Node_info_BLS_key",
    "response_result_data_Hardware_HDD_used_by_node",
    "response_result_data_Pool_info_Read_only",
    "response_result_data_Pool_info_Suspicious_nodes",
    "response_result_data_Pool_info_Quorums",
    "response_result_data_Software_OS_version",

    ##Doesn't Display
    "response_result_data_Node_info_verkey",
    "response_result_data_Node_info_Catchup_status_Ledger_statuses",
    "response_result_data_Node_info_Catchup_status_Waiting_consistency_proof_msgs",
    "response_result_data_Node_info_Catchup_status_Last_txn_3PC_keys",
    "response_result_data_Node_info_Committed_ledger_root_hashes",
    "response_result_data_Node_info_Committed_state_root_hashes",
    "response_result_data_Node_info_Uncommitted_state_root_hashes",
    "response_result_data_Node_info_did",
    "response_result_data_Extractions_indy-node-status",
    "response_result_data_Extractions_node-control-status",
    "response_result_data_Extractions_upgrade_log",
    "response_result_data_Extractions_journalctl_exceptions",
    ##Not sure if Reachable Nodes is a string or not
    "response_result_data_Pool_info_Reachable_nodes",
    "response_result_data_Pool_info_Unreachable_nodes",
    "response_result_data_Software_Installed_packages",
    "response_result_data_Software_Indy_packages"
  ]

  ## Name key is the key to use as the measurement name.
  # json_name_key = "name"

  ## Time key is the key containing the time that should be used to create the
  ## metric.
  json_time_key = "status_timestamp"

  ## Time format is the time layout that should be used to interpret the json_time_key.
  ## The time must be `unix`, `unix_ms`, `unix_us`, `unix_ns`, or a time in the
  ## "reference time".  To define a different format, arrange the values from
  ## the "reference time" in the example to match the format you will be
  ## using.  For more information on the "reference time", visit
  ## https://golang.org/pkg/time/#Time.Format
  ##   ex: json_time_format = "Mon Jan 2 15:04:05 -0700 MST 2006"
  ##       json_time_format = "2006-01-02T15:04:05Z07:00"
  ##       json_time_format = "01/02/2006 15:04:05"
  ##       json_time_format = "unix"
  ##       json_time_format = "unix_ms"
  json_time_format = "unix"

  ## Timezone allows you to provide an override for timestamps that
  ## don't already include an offset
  ## e.g. 04/06/2016 12:41:45
  ##
  ## Default: "" which renders UTC
  ## Options are as follows:
  ##   1. Local               -- interpret based on machine localtime
  ##   2. "America/New_York"  -- Unix TZ values like those found in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  ##   3. UTC                 -- or blank/unspecified, will return timestamp in UTC
  json_timezone = ""