#!/bin/bash
export MSYS_NO_PATHCONV=1
export DOCKERHOST=${APPLICATION_URL-$(docker run --rm --net=host eclipse/che-ip)}
SCRIPT_HOME="$(cd "$(dirname "$0")" && pwd)"
export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-indy-node-monitor-stack}"
set -e

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage() {
  cat <<-EOF

  Usage: $0 [command] [options]

  Commands:

  Options:
EOF
  exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
function toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}

function echoBlue (){
  _msg=${1}
  _blue='\e[34m'
  _nc='\e[0m' # No Color
  echo -e "${_blue}${_msg}${_nc}" >&2
}

function echoGreen (){
  _msg=${1}
  _blue='\e[32m'
  _nc='\e[0m' # No Color
  echo -e "${_blue}${_msg}${_nc}" >&2
}

function echoYellow (){
  _msg=${1}
  _yellow='\e[33m'
  _nc='\e[0m' # No Color
  echo -e "${_yellow}${_msg}${_nc}" >&2
}

function echoError (){
  _msg=${1}
  _red='\e[31m'
  _nc='\e[0m' # No Color
  echo -e "${_red}${_msg}${_nc}" >&2
}

promptForConfirmation(){
  (
    _msg=${@}
    echoYellow "\n${_msg}"
    read -n1 -s -r -p $'\e[33mWould you like to continue?\e[0m  Press \'Y\' to continue, or any other key to exit ...\n' key
    if [[ $(toLower ${key}) == 'y' ]]; then
      return 0
    else
      return 1
    fi
  )
}

# function functionExists() {
#   (
#     if [ ! -z ${1} ] && type ${1} &>/dev/null; then
#       return 0
#     else
#       return 1
#     fi
#   )
# }

function openInBrowser(){
  (
    unset openBrowserCmd
    if [[ "$OSTYPE" == "msys" ]]; then
      openBrowserCmd='cmd "/c start ${url}"'
    elif [ $(uname) == "Darwin" ]; then
      openBrowserCmd='open ${url}'
    elif [ $(uname) == "Linux" ]; then
      openBrowserCmd='xdg-open ${url}'
    fi

    if [ ! -z "${openBrowserCmd}" ]; then
      for url in ${@}; do
        echoBlue "\nOpening ${url} in your default browser ..."
        eval ${openBrowserCmd}
      done
    else
      echoYellow "Unable to detect browser start command. Please browser to the following application URLs:"
      for url in ${@}; do
        echo "  - ${url}"
      done
    fi
  )
}

function logs() {
  (
    echoBlue "Following container logs for ${@} ..."
    docker compose logs -f ${@}
  )
}

function openShell() {
  (
    echoBlue "Connecting remote shell to ${@} ..."
    docker compose exec ${@} /bin/bash
  )
}

function installPlugin() {
  (
    echoGreen "Installing Grafana plugin; ${@} ... "
    docker compose exec grafana grafana-cli plugins install  ${@}
  )
}

function readEnvFile(){
  (
    envFile=${1}
    if [ -f ${envFile} ]; then
      # Read in the content minus any comments ...
      _value=$(sed '/^[[:blank:]]*#/d;s/#.*//' ${envFile})
    fi
    echo "${_value}"
  )
}

function loadEnvVariables(){
  for envTag in ${@}; do
    for item in $(readEnvFile ".env-${envTag}"); do
      export "${item}"
    done
  done
}

function deleteData(){
  (
    deleteList=${@:-influxdb prometheus grafana}
    unset influxdb_data
    unset prometheus_data
    unset grafana_data
    unset delete_msg
    for item in ${deleteList}; do
      case ${item} in
        influxdb)
          influxdb_data=1 ;;
        prometheus)
          prometheus_data=1 ;;
        grafana)
          grafana_data=1 ;;
        *)
          influxdb_data=1
          prometheus_data=1
          grafana_data=1
          ;;
      esac
      delete_msg+=" ${item}"
    done
    msg_start=$(echo ${delete_msg} | awk '{$NF="";sub(/[ \t]+$/,"")}1')
    msg_end=$(echo ${delete_msg} | awk '{print $(NF)}')
    delete_msg="${msg_start}${msg_start:+ and }${msg_end}"

    if promptForConfirmation "If you continue all ${delete_msg} data will be deleted and reprovisioned from scratch next time you start the monitor.
If you want to save any of your work, ensure you export it and update your provisioning configurations before continuing.\n"; then

      if [ ! -z ${influxdb_data} ]; then
        echo "Deleting all InfluxDB data..."
        rm -rf influxdb/data
      fi
      if [ ! -z ${prometheus_data} ]; then
        echo "Deleting all Prometheus data..."
        $(docker volume rm indy-node-monitor-stack_prometheus_data -f >/dev/null 2>&1)
      fi
      if [ ! -z ${grafana_data} ]; then
        echo "Deleting all Grafana data..."
        $(docker volume rm indy-node-monitor-stack_grafana_data -f >/dev/null 2>&1)
      fi
    fi
  )
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
_envTags="default"
_imageTag="latest"
while getopts ":h-:" FLAG; do
  case $FLAG in
    h ) usage ;;
    \? ) #unrecognized option - show help
      echoError "\nInvalid script option: -${OPTARG}"
      usage
      ;;
    - )
      case ${OPTARG} in
        "nightly"*)
          _imageTag="nightlies"
          ;;
      esac
  esac
done
shift $((OPTIND-1))
_envTags+=" ${_imageTag}"

# Load network monitor seeds if the '.env-seeds' file is found.
# The file is ignored by Git so seeds don't end up in source control.
if [ -f ".env-seeds" ]; then
  _envTags+=" seeds"
fi
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$(toLower ${1})
shift || COMMAND=usage

loadEnvVariables "${_envTags}"

case "${COMMAND}" in
  start|up)
    echoGreen "\nStarting up the Indy Node Monitoring Stack ...\n"
    docker compose up -d --build ${@}
    sleep 3
    openInBrowser "http://localhost:3000"
    ;;
  stop|down)
    echoGreen "\nStopping the Indy Node Monitoring Stack ...\n"
    docker compose down
    ;;
  restart)
    echoGreen "\nRestarting the Indy Node Monitoring Stack ...\n"
    docker compose down ${@}
    docker compose up -d --build ${@}
    ;;
  logs)
    logs ${@}
    ;;
  shell)
    openShell ${@}
    ;;
  install-plugin)
    installPlugin ${@}
    ;;
  delete-data)
    deleteData ${@}
    ;;
  *)
    usage
    ;;
esac

popd >/dev/null